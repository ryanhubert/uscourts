#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Ryan HÃ¼bert
# Department of Political Science
# University of California, Davis

"""
judges.QueryTools v1.0
A set of functions used to query entries in the FJC's database of federal
judges.
"""

# Import Modules
import os
import re
import csv
import datetime

current_path = os.path.dirname(os.path.abspath( __file__ ))

# Courts abbreviations
with open(current_path + "/data/courts.csv","r") as csvfile:
    reader = csv.DictReader(csvfile.read().splitlines())
    abbr = {"":""}
    for row in reader:
        abbr[row['full_name']] = row['abbr']

def MakeDate(string):
    """
    Converts ##/##/#### string into a datetime.date object
    """
    if string == "":
        return(datetime.date(9999,12,31))
    elif re.search('^\d\d?/\d\d?/\d\d\d\d$',string):
        return(datetime.datetime.strptime(string, '%m/%d/%Y').date())
    else:
        return('')

def SittingJudges(data,begdate,enddate=None,court_abbr=None):
    """
    Takes a court name and date (or range of dates) and returns IDs for
    all judges sitting in that court for that date (or range of dates)
    [including ones sitting only partially in date range, if relevant].
    """
    court_abbr = court_abbr.upper() if court_abbr != None else None
    if enddate == None:
        enddate = begdate
    alljudges = {'active': [], 'senior': []}
    for k in data:
        for n in range(1,7):
            # if court_abbr in ['',None]:
            #     continue
            if court_abbr != None and abbr[data[k]['Court Name ('+str(n)+')']] != court_abbr:
                continue
            #ndate = MakeDate(data[k]['Nomination Date ('+str(n)+')']) # nomination
            #hdate = MakeDate(data[k]['Hearing Date ('+str(n)+')']) # hearing
            rdate = MakeDate(data[k]['Recess Appointment Date ('+str(n)+')']) # recess appt
            cdate = MakeDate(data[k]['Commission Date ('+str(n)+')']) # commission
            sdate = MakeDate(data[k]['Senior Status Date ('+str(n)+')']) # senior status
            tdate = MakeDate(data[k]['Termination Date ('+str(n)+')']) # termination

            if min(cdate,rdate) > enddate:
                continue
            elif tdate < begdate:
                continue

            if min(sdate,tdate) > enddate:
                days = min((enddate - begdate).days,(enddate - min(cdate,rdate)).days)
                alljudges['active'].append((k,str(n),days))
            elif sdate > begdate and sdate < enddate:
                days1 = min((sdate - begdate).days,(sdate - min(cdate,rdate)).days)
                alljudges['active'].append((k,str(n),days1))
                days2 = min((enddate - sdate).days,(tdate - sdate).days)
                alljudges['senior'].append((k,str(n),days2))
            elif sdate < begdate:
                days = min((enddate - begdate).days,(tdate - begdate).days)
                alljudges['senior'].append((k,str(n),days))
    return(alljudges)

def WhichCourt(date, reshaped_dict, fjc_id, use_closest = False):
    """
    WhichCourt identifies which court a judge is sitting on as of a date

    :param date: datetime.date object
    :param reshaped_dict: dict object generated by ReshapeData in judges.LoadData
    :param fjc_id: str object representing FJC ID number
    :param use_closest: bool - if False, return NoneType if judge not on court during date
    :return: tuple - (judge's court, judge's type)
    """
    # Determine which court judge is sitting on during case,
    # whether judge is a magistrate.

    ## Figure out which court the judge is sitting on when the
    ## case is filed and when it is terminated. A judge is
    ## considered to be "on a court" as of the latest of their:
    ## commission date, confirmation date, nomination date.
    ## This means the commission date will be the official
    ## date *most* judges begin their service.
    ## Data on magistrates is coarser, so we just take Jan. 1
    ## of the year they're appointed as their commission date.
    jcourts = reshaped_dict[fjc_id]["Courts"]

    djcourts = []

    ## Code judge's start and end dates
    for k in jcourts:
        # Termination date = termination date or 12/31/9999 (That is: not terminated yet)
        end_date = datetime.date(9999, 12, 31) if jcourts[k]['date_termination'] is None else \
        jcourts[k]['date_termination']

        # Start date = commission date. If unavailable then later of confirmation or nomination dates
        beg_date = [x for x in [jcourts[k]['date_nomination'], jcourts[k]['date_confirmation'],
                                jcourts[k]['date_commission']] if x is not None]

        # If none available, probably a magistrate
        if beg_date == [] and date < end_date:
            beg_date = [date - datetime.timedelta(30)]

        beg_date = max(beg_date)
        djcourts.append([jcourts[k]['service_number'],jcourts[k]['court'],jcourts[k]['judge_type'],beg_date,end_date,False])

    for i in djcourts:
        if i[3] <= date <= i[4]:
            i[5] = True

    ## If a judge is on two courts on date (eg after promotion), then assume
    ## they're on the first court and not the promoted court.
    ## This assumption reflects idea that judges are finishing up their
    ## caseloads from their previous assignment
    if len([x for x in djcourts if x[5]]) > 1:
        for x in djcourts:
            if x[1] == max([y[1] for y in djcourts if y[5]]):
                x[5] = False

    if use_closest:
        ## For judges who were not on the bench on date, we will classify them to
        ## their closest appointment.
        if [y[1] for y in djcourts if y[5]] == []:
            closest_court = ('',999999)
            for i in djcourts:
                if min(abs(int((i[3] - date).days)),abs(int((i[4] - date).days))) < closest_court[1]:
                    closest_court = (i[1],min(abs(int((i[3] - date).days)),abs(int((i[4] - date).days))))
            for x in djcourts:
                if x[1] == closest_court[0]:
                    x[5] = True

    if [x for x in djcourts if x[5]] == []:
        return None, None
    else:
        return [x for x in djcourts if x[5]][0][1], [x for x in djcourts if x[5]][0][2]


